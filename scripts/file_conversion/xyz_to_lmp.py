import os
import re
import sys
from pymatgen.io.xyz import XYZ
from pymatgen.core import Molecule

if len(sys.argv) < 2:
    print("Usage: python convert_xyz_to_lmp.py filename.xyz")
    sys.exit(1)

xyz_file = sys.argv[1]

if not os.path.isfile(xyz_file):
    print(f"File '{xyz_file}' not found.")
    sys.exit(1)

# Read molecule and extract lattice vectors if present
with open(xyz_file, "r") as f:
    lines = f.readlines()
    n_atoms = int(lines[0].strip())
    lattice_vectors = None
    
    if len(lines) > 1:
        match = re.search(r'Lattice="([^"]+)"', lines[1])
        if match:
            lattice_vectors = [float(x) for x in match.group(1).split()]

mol = XYZ.from_file(xyz_file).molecule

# Output filename
lmp_file = os.path.splitext(xyz_file)[0] + ".lmp"

with open(lmp_file, "w") as f:
    f.write("LAMMPS data file generated by script\n\n")
    f.write(f"{len(mol)} atoms\n")
    
    unique_species = list({site.species_string for site in mol})
    f.write(f"{len(unique_species)} atom types\n\n")
    
    # Write box dimensions
    if lattice_vectors and len(lattice_vectors) == 9:
        a, b, c = lattice_vectors[0:3], lattice_vectors[3:6], lattice_vectors[6:9]
        f.write(f"0.0 {a[0]:.6f} xlo xhi\n")
        f.write(f"0.0 {b[1]:.6f} ylo yhi\n")
        f.write(f"0.0 {c[2]:.6f} zlo zhi\n")
        f.write(f"{b[0]:.6f} {c[0]:.6f} {c[1]:.6f} xy xz yz\n\n")
    else:
        # Use molecular dimensions with 5 Angstrom padding
        coords = mol.cart_coords
        f.write(f"{coords[:,0].min()-5:.6f} {coords[:,0].max()+5:.6f} xlo xhi\n")
        f.write(f"{coords[:,1].min()-5:.6f} {coords[:,1].max()+5:.6f} ylo yhi\n")
        f.write(f"{coords[:,2].min()-5:.6f} {coords[:,2].max()+5:.6f} zlo zhi\n\n")
    
    # Write atomic masses
    f.write("Masses\n\n")
    for idx, species in enumerate(unique_species, 1):
        mass = next(site.specie.atomic_mass for site in mol if site.species_string == species)
        f.write(f"{idx} {mass:.4f}\n")
    
    # Write atomic coordinates
    f.write("\nAtoms # atomic\n\n")
    species_to_type = {species: idx+1 for idx, species in enumerate(unique_species)}
    
    for idx, site in enumerate(mol, 1):
        atom_type = species_to_type[site.species_string]
        x, y, z = site.coords
        f.write(f"{idx} {atom_type} {x:.6f} {y:.6f} {z:.6f}\n")

print(f".lmp file generated: {lmp_file}")
